package com.atik.MyCodingPractice;

import java.util.Arrays;
import java.util.Scanner;

public class RowlColMatrix {
    public static void main(String[] args) {
    int arr[][]={
            {10,20,30,40},
            {15,25,35,45},
            {20,37,39,52},
            {24,43,47}
    };
        System.out.println("enter the target which you want to Search for:");
        Scanner in = new Scanner(System.in);
        int tar=in.nextInt();
        int ans[]=search(arr,tar);
        System.out.println("element found at :"+ Arrays.toString(ans));
    }
    static int [] search(int [][] matrix,int target){
        int r=0;
        int c=matrix.length-1;
        while (r< matrix.length && c>=0){
            if(matrix[r][c]==target){
                return new int[]{r,c};
            } if(matrix[r][c]<target){
                r++;
            }else{
                c--;
            }
        }
        return new int[]{-1,-1};
    }
}
//time complexity: o(2n) but in time complexity constants are ignored and in this Sorted Array we can reduce the search space by using the upperbound 
//and the lower bound which basically are the start and the end of the arr or matrix so the Start ot the Row =the 0th element so the r=0
//and the end or the col is the last column of that particular row which can be get by the arr[row].length-1 because array index starts from 0 hence we can 
//reduce the search space and get the target element
